const express = require("express");
const mysql = require("mysql");
const cors = require("cors");

const app = express();
app.use(express.json());

app.use(cors({ origin: "http://localhost:3000" }));
// Configuración de la conexión a la base de datos
const db = mysql.createConnection({
  host: "localhost",
  user: "root", // Reemplaza con tu usuario de MySQL
  password: "abcd1234", // Reemplaza con tu contraseña de MySQL
  database: "productos_db", // Reemplaza con el nombre de tu base de datos
});

// Conectar a la base de datos
db.connect((err) => {
  if (err) {
    console.error("Error de conexión a la base de datos:", err);
    return;
  }
  console.log("Conexión a la base de datos establecida");
});

// Ruta para obtener productos
app.get("/productos", (req, res) => {
  // Consultar productos desde la base de datos
  const consulta = "SELECT * FROM productos";

  db.query(consulta, (error, resultados) => {
    if (error) {
      console.error(
        "Error al obtener productos desde la base de datos:",
        error
      );
      res.status(500).json({ error: "Error interno del servidor" });
      return;
    }

    // Enviar la lista de productos como respuesta
    res.json(resultados);
  });
});

app.get("/clientes", (req, res) => {
  // Consultar productos desde la base de datos
  const consulta = "SELECT * FROM clientes";

  db.query(consulta, (error, resultados) => {
    if (error) {
      console.error(
        "Error al obtener productos desde la base de datos:",
        error
      );
      res.status(500).json({ error: "Error interno del servidor" });
      return;
    }

    // Enviar la lista de productos como respuesta
    res.json(resultados);
  });
});
// Otros manejadores de rutas y configuraciones...

app.get("/empresa", (req, res) => {
  // Consultar productos desde la base de datos
  const consulta = "SELECT * FROM empresa";

  db.query(consulta, (error, resultados) => {
    if (error) {
      console.error(
        "Error al obtener productos desde la base de datos:",
        error
      );
      res.status(500).json({ error: "Error interno del servidor" });
      return;
    }

    // Enviar la lista de productos como respuesta
    res.json(resultados);
  });
});

app.post("/ordenes", (req, res) => {
  const { clienteId, productosSeleccionados, fechaPedido, sucursal, total } =
    req.body;

  // Insert into ordenes table
  const ordenesQuery = `INSERT INTO ordenes (clienteId, fechaPedido, sucursal, total) VALUES (?, ?, ?, ?)`;
  db.query(
    ordenesQuery,
    [clienteId, fechaPedido, sucursal, total],
    (ordenError, ordenResult) => {
      if (ordenError) {
        console.error("Error al subir la orden:", ordenError);
        res.status(500).json({ error: "Error interno del servidor" });
      } else {
        // ordenId will be automatically generated by the database
        const ordenId = ordenResult.insertId;

        // Insert into productos_seleccionados table
        const productosSeleccionadosQuery = `
        INSERT INTO productos_seleccionados (ordenId, productoId, cantidad, nombre, precio)
        VALUES (?, ?, ?, ?, ?)
        `;

        // Assuming productosSeleccionados is an array of objects with productoId, cantidad, nombre, precio
        const productosInsertValues = productosSeleccionados.map(
          ({ productoId, cantidad, nombre, precio }) => [
            ordenId,
            productoId,
            cantidad,
            nombre,
            precio,
          ]
        );

        db.query(
          productosSeleccionadosQuery,
          productosInsertValues,
          (productosError) => {
            if (productosError) {
              console.error(
                "Error al insertar productos seleccionados:",
                productosError
              );
              res.status(500).json({ error: "Error interno del servidor" });
            } else {
              console.log("Inserción exitosa:", ordenResult);
              res
                .status(200)
                .json({ message: "Orden insertada correctamente" });
            }
          }
        );
      }
    }
  );
});

// Iniciar el servidor en el puerto 3000
const PORT = 3001;
app.listen(PORT, () => {
  console.log(`Servidor escuchando en el puerto ${PORT}`);
});
